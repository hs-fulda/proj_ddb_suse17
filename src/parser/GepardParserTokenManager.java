/* Generated By:JavaCC: Do not edit this line. GepardParserTokenManager.java */
package parser;

/** Token Manager. */
public class GepardParserTokenManager implements GepardParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20041bff86eL) != 0L)
         {
            jjmatchedKind = 32;
            return -1;
         }
         if ((active0 & 0x20003e000400L) != 0L)
            return 52;
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 32;
            return 35;
         }
         return -1;
      case 1:
         if ((active0 & 0x20041bff86eL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return 34;
         }
         return -1;
      case 2:
         if ((active0 & 0x20041bff87eL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x20041bfe87eL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x41bfe07eL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x19ee07eL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x9ee03aL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x6e020L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x46020L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x46020L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x46020L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x3e000400L);
      case 39:
         return jjStopAtPos(0, 38);
      case 42:
         return jjStopAtPos(0, 43);
      case 45:
         return jjStopAtPos(0, 40);
      case 46:
         return jjStopAtPos(0, 42);
      case 47:
         return jjStopAtPos(0, 44);
      case 59:
         return jjStopAtPos(0, 37);
      case 95:
         return jjStopAtPos(0, 35);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x60062L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x90000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40002000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x301008L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 195:
      case 227:
         return jjMoveStringLiteralDfa1_0(0x1fc00000000000L);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020014L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x88c000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000040L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x301008L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4042820L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40010002L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 164:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 182:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 188:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 376:
      case 255:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 338:
      case 339:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 8211:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 8222:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000042L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000880000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2040020L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x48010000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x24002010L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x120400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x208808L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(3, 10);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20050L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x986008L);
      case 76:
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 77:
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40020L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(4, 16);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1008004L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x104000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0022L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(5, 2);
         else if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(5, 6);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 24);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8c00aL);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40020L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x900000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(6, 1);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(6, 20);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(6, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40020L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0xe000L);
      case 82:
      case 114:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(6, 3);
         else if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(6, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(7, 17);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40020L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x40020L);
      case 89:
      case 121:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(8, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x40020L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(10, 5);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(10, 14);
         break;
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(10, 18);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(11, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 52;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(47);
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(48);
                  else if (curChar == 32)
                     jjAddStates(0, 3);
                  else if (curChar == 44)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjstateSet[jjnewStateCnt++] = 44;
                  }
                  else if (curChar == 41)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjstateSet[jjnewStateCnt++] = 42;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjstateSet[jjnewStateCnt++] = 40;
                  }
                  if (curChar == 60)
                     jjCheckNAdd(48);
                  else if (curChar == 62)
                     jjCheckNAdd(48);
                  break;
               case 52:
                  if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(47);
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(48);
                  if (curChar == 60)
                     jjCheckNAdd(48);
                  else if (curChar == 62)
                     jjCheckNAdd(48);
                  break;
               case 1:
                  if (curChar == 32 && kind > 7)
                     kind = 7;
                  break;
               case 4:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 13:
                  if (curChar == 32 && kind > 8)
                     kind = 8;
                  break;
               case 20:
                  if (curChar == 32 && kind > 9)
                     kind = 9;
                  break;
               case 31:
                  if (curChar == 32 && kind > 22)
                     kind = 22;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     kind = 31;
                  break;
               case 39:
                  if (curChar != 40)
                     break;
                  kind = 33;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (curChar == 32 && kind > 33)
                     kind = 33;
                  break;
               case 41:
                  if (curChar != 41)
                     break;
                  kind = 34;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 32 && kind > 34)
                     kind = 34;
                  break;
               case 43:
                  if (curChar != 44)
                     break;
                  kind = 36;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if (curChar == 32 && kind > 36)
                     kind = 36;
                  break;
               case 45:
                  if (curChar == 32)
                     jjAddStates(0, 3);
                  break;
               case 46:
                  if ((0x7000000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(47);
                  break;
               case 47:
                  if (curChar == 32 && kind > 39)
                     kind = 39;
                  break;
               case 48:
                  if (curChar != 61)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(47);
                  break;
               case 49:
                  if (curChar == 33)
                     jjCheckNAdd(48);
                  break;
               case 50:
                  if (curChar == 62)
                     jjCheckNAdd(48);
                  break;
               case 51:
                  if (curChar == 60)
                     jjCheckNAdd(48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 0:
                  if ((0x200000002000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x8000000080000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 52 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   46, 49, 50, 51, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\137", null, "\73", "\47", null, 
"\55", null, "\56", "\52", "\57", "\40", null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[52];
private final int[] jjstateSet = new int[104];
protected char curChar;
/** Constructor. */
public GepardParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public GepardParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 52; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
