options {
	STATIC = false;
}

PARSER_BEGIN(GepardParser)
package parser;
public class GepardParser {
	public static void main(String args[]) {
		GepardParser parser = new GepardParser(System.in);
		try{
			System.out.println(parser.ParseQuery());
		}catch(Exception e){
		   System.out.println(e);
		}
	}
}
PARSER_END(GepardParser)

/* ================ Tokens Start ============== */

// Skip Tokens
SKIP : { " " | "\r" | "\n" | "\t"}

// DDL Tokens
TOKEN : { < CREATE : "CREATE" | "create" > }
TOKEN : { < DROP : "DROP" | "drop" > }
TOKEN : { < TABLE : "TABLE" | "table" > }
TOKEN : { < INTEGER : "INTEGER" > }
TOKEN : { < VARCHAR : "VARCHAR"> }
TOKEN : { < CASCADE : "CASCADE" | "cascade" > }
TOKEN : { < CONSTRAINT : "CONSTRAINT" | "constraint"> }
TOKEN : { < CONSTRAINTS : "CONSTRAINTS" | "constraints"> }
TOKEN : { < PRIMARYKEY : "PRIMARY KEY" | "primary key"> }
TOKEN : { < UNIQUE : "UNIQUE" | "unique"> }
TOKEN : { < HORIZONTAL : "HORIZONTAL" | "horizontal"> }




// DML Tokens
TOKEN : { < DELETE : "DELETE" | "delete" > }
TOKEN : { < FROM : "FROM" | "from" > }
TOKEN : { < WHERE : "WHERE" | "where" > }
TOKEN : { < INSERT : "INSERT" | "insert" > }
TOKEN : { < INTO : "INTO" | "into" > }
TOKEN : { < VALUES : "VALUES" | "values" > }




// Special Character Tokens
TOKEN : { < LPAREN : "(" > }
TOKEN : { < RPAREN : ")" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < COMMA : "," > }
TOKEN : { < SINGLEQUOTE : "'" > }
TOKEN : {<OPERATOR: "=" | "!=" | ">=" | ">" | "<=" | "<" >}



// Select Tokens



// Literal Tokens
TOKEN : { < DIGIT : ["0"-"9"] > }
TOKEN : { < LETTER : ["a"-"z","A"-"Z"] > }
TOKEN : { < SYMBOL : "_" | "-" > }

/* ================ Tokens End ============== */

/* ================ Rules Start ============== */

// Main Parser Call
int ParseQuery() : {int queryType;}
{
	queryType=ParseDDLQuery(){return queryType;} |
	queryType=ParseDMLQuery(){return queryType;}
}

// DDL Statement
int ParseDDLQuery() : {int queryType;}
{
	queryType=DropTable(){return queryType;} |
	queryType=CreateTable(){return queryType;}
}
int DropTable() : {}
{
	<DROP><TABLE>Name()(<CASCADE><CONSTRAINTS>)?<SEMICOLON>
	{return 3;}
}
int CreateTable() : {int queryType;}
{
	<CREATE><TABLE>Name()<LPAREN>TableColumn()(<COMMA>(TableColumn()|TableConstraint()))*<RPAREN>queryType=PartitionedOrNonPartitioned(){return queryType;}
}
int PartitionedOrNonPartitioned() : {}
{
	CreateTableNonPartitioned(){return 1;}|CreateTablePartitioned(){return 2;}
}
void CreateTableNonPartitioned() : {}
{
	<SEMICOLON>
}
void CreateTablePartitioned() : {}
{
	HorizontalSyntax()
}
void HorizontalSyntax() : {}
{
	<HORIZONTAL><LPAREN>Name()<LPAREN>ListOfBoundaries()<RPAREN><RPAREN><SEMICOLON>
}
void ListOfBoundaries() : {}
{
	(<DIGIT>)+(<COMMA>(<DIGIT>)+)*
}
void TableColumn() : {}
{
	Name()(<INTEGER>|(<VARCHAR><LPAREN>(<DIGIT>)+<RPAREN>))
}
void TableConstraint() : {}
{
	<CONSTRAINT>Name()(<PRIMARYKEY>|<UNIQUE>)<LPAREN>Name()<RPAREN>
}


// Select Statement


// DML Statement
int ParseDMLQuery() : {int queryType;}
{
	queryType=DeleteTable(){return queryType;} | 
	queryType=InsertTable(){return queryType;}
}
int DeleteTable() : {}
{
  <DELETE><FROM>Name()(WhereClause())?<SEMICOLON>
  {return 4;}
  
}

int InsertTable() : {}
{
  <INSERT><INTO>Name()<VALUES><LPAREN>(Constants())((<COMMA>Constants())*)<RPAREN><SEMICOLON>
  {return 5;}
}



// General Semantics
void WhereClause() : {}
{
	<WHERE>Name()<OPERATOR>Constants()
}
void Name() : {}
{
	<LETTER>(<LETTER>|<DIGIT>|<SYMBOL>)*
}

void Constants() : {}
{
	<SINGLEQUOTE>Name()<SINGLEQUOTE>|(<DIGIT>)+
}


/* ================ Rules End ============== */