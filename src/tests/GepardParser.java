/* GepardParser.java */
/* Generated By:JavaCC: Do not edit this line. GepardParser.java */
//package parser;
public class GepardParser implements GepardParserConstants {
        public static void main(String args[]) {
                GepardParser parser = new GepardParser(System.in);
                try{
                        //parser.SelectNoGroup();		//OK
                        //parser.ListOfAttributes();	// OK
                        //parser.TableAttribute();	// OK, using "Table." raises an exception Encountered " "TABLE" "table (token)
                        //parser.TableName();		// OK
                        //parser.ListOfTables();		// OK

                        //parser.NonJoinCondition();
                        //System.out.println(parser.Select());
                        System.out.println("Validated");
                }catch(Exception e){
                   System.out.println(e);
                }
        }

/* ================ Tokens End ============== */

/* ================ Rules Start ============== */

// Main Parser Call
  final public int ParseQuery() throws ParseException {int queryType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CREATE:
    case DROP:{
      queryType = ParseDDLQuery();
{if ("" != null) return queryType;}
      break;
      }
    case DELETE:
    case INSERT:{
      queryType = ParseDMLQuery();
{if ("" != null) return queryType;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// DDL Statement
  final public int ParseDDLQuery() throws ParseException {int queryType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DROP:{
      queryType = DropTable();
{if ("" != null) return queryType;}
      break;
      }
    case CREATE:{
      queryType = CreateTable();
{if ("" != null) return queryType;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int DropTable() throws ParseException {
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASCADE:{
      jj_consume_token(CASCADE);
      jj_consume_token(CONSTRAINTS);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return 3;}
    throw new Error("Missing return statement in function");
  }

  final public int CreateTable() throws ParseException {int queryType;
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    Name();
    jj_consume_token(LPAREN);
    TableColumn();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:
      case VARCHAR:
      case UNDERSCORE:
      case MINUS:
      case DIGIT:
      case LETTER:{
        TableColumn();
        break;
        }
      case CONSTRAINT:{
        TableConstraint();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    queryType = PartitionedOrNonPartitioned();
{if ("" != null) return queryType;}
    throw new Error("Missing return statement in function");
  }

  final public int PartitionedOrNonPartitioned() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      CreateTableNonPartitioned();
{if ("" != null) return 1;}
      break;
      }
    case HORIZONTAL:{
      CreateTablePartitioned();
{if ("" != null) return 2;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void CreateTableNonPartitioned() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void CreateTablePartitioned() throws ParseException {
    HorizontalSyntax();
  }

  final public void HorizontalSyntax() throws ParseException {
    jj_consume_token(HORIZONTAL);
    jj_consume_token(LPAREN);
    Name();
    jj_consume_token(LPAREN);
    ListOfBoundaries();
    jj_consume_token(RPAREN);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void ListOfBoundaries() throws ParseException {
    label_2:
    while (true) {
      jj_consume_token(DIGIT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIGIT:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      label_4:
      while (true) {
        jj_consume_token(DIGIT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DIGIT:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
    }
  }

  final public void TableColumn() throws ParseException {
    Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case VARCHAR:{
      jj_consume_token(VARCHAR);
      jj_consume_token(LPAREN);
      label_5:
      while (true) {
        jj_consume_token(DIGIT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DIGIT:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TableConstraint() throws ParseException {
    jj_consume_token(CONSTRAINT);
    Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIMARYKEY:{
      jj_consume_token(PRIMARYKEY);
      break;
      }
    case UNIQUE:{
      jj_consume_token(UNIQUE);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    Name();
    jj_consume_token(RPAREN);
  }

// Select Statement
  final public 
int Select() throws ParseException {int queryType;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COUNT:{
      queryType = SelectCountAllTable();
{if ("" != null) return queryType;}
      break;
      }
    case UNDERSCORE:
    case AST:
    case LETTER:{
      queryType = SelectNoGroup();
{if ("" != null) return queryType;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void ListOfAttributes() throws ParseException {
    TableAttribute();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      TableAttribute();
    }
  }

  final public void TableAttribute() throws ParseException {
    TableName();
    jj_consume_token(DOT);
    TableName();
  }

  final public void NonJoinCondition() throws ParseException {
    jj_consume_token(LPAREN);
    TableAttribute();
    jj_consume_token(OPERATOR);
    Constant();
    jj_consume_token(RPAREN);
  }

  final public void NonJoinConditions() throws ParseException {
    NonJoinCondition();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case OR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      NonJoinCondition();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  final public void Count() throws ParseException {
    jj_consume_token(COUNT);
    jj_consume_token(LPAREN);
    jj_consume_token(AST);
    jj_consume_token(RPAREN);
  }

  final public int SelectCountAllTable() throws ParseException {
    Count();
    jj_consume_token(FROM);
    Name();
    jj_consume_token(SEMICOLON);
{if ("" != null) return 11;}
    throw new Error("Missing return statement in function");
  }

  final public int SelectNoGroup() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AST:{
      jj_consume_token(AST);
      break;
      }
    case UNDERSCORE:
    case LETTER:{
      ListOfAttributes();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FROM);
    ListOfTables();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      jj_consume_token(WHERE);
      fdbs_where_clause();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return 12;}
    throw new Error("Missing return statement in function");
  }

  final public void fdbs_where_clause() throws ParseException {
    jj_consume_token(LETTER);
  }

// DML Statement
  final public int ParseDMLQuery() throws ParseException {int queryType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DELETE:{
      queryType = DeleteTable();
{if ("" != null) return queryType;}
      break;
      }
    case INSERT:{
      queryType = InsertTable();
{if ("" != null) return queryType;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int DeleteTable() throws ParseException {
    jj_consume_token(DELETE);
    jj_consume_token(FROM);
    Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE:{
      WhereClause();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return 4;}
    throw new Error("Missing return statement in function");
  }

  final public int InsertTable() throws ParseException {
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    Name();
    jj_consume_token(VALUES);
    jj_consume_token(LPAREN);
    Constant();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      Constant();
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
{if ("" != null) return 5;}
    throw new Error("Missing return statement in function");
  }

// General Semantics
  final public void WhereClause() throws ParseException {
    jj_consume_token(WHERE);
    Name();
    jj_consume_token(OPERATOR);
    Constant();
  }

//Names must begin with a letter and may not end with an underscore. Only use letters, numbers and underscores in names.
  final public void Name() throws ParseException {
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNDERSCORE:
      case MINUS:
      case DIGIT:
      case LETTER:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LETTER:{
        jj_consume_token(LETTER);
        break;
        }
      case DIGIT:{
        jj_consume_token(DIGIT);
        break;
        }
      case UNDERSCORE:{
        jj_consume_token(UNDERSCORE);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void TableName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LETTER:{
      jj_consume_token(LETTER);
      break;
      }
    case UNDERSCORE:{
      jj_consume_token(UNDERSCORE);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UNDERSCORE:
      case DIGIT:
      case LETTER:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LETTER:{
        jj_consume_token(LETTER);
        break;
        }
      case UNDERSCORE:{
        jj_consume_token(UNDERSCORE);
        break;
        }
      case DIGIT:{
        jj_consume_token(DIGIT);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ListOfTables() throws ParseException {
    TableName();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      TableName();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void Constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINGLEQUOTE:{
      StringConstant();
      break;
      }
    case MINUS:
    case DIGIT:{
      IntegerConstant();
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IntegerConstant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      jj_consume_token(DIGIT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIGIT:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
    }
  }

  final public void StringConstant() throws ParseException {
    jj_consume_token(SINGLEQUOTE);
    Name();
    jj_consume_token(SINGLEQUOTE);
  }

  /** Generated Token Manager. */
  public GepardParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x90060,0x60,0x400,0x2000000,0x30000b00,0x1008000,0x0,0x2000000,0x0,0x0,0x300,0x6000,0x10000000,0x2000000,0x0,0x0,0x10000000,0x40000,0x90000,0x40000,0x2000000,0x30000000,0x30000000,0x10000000,0x10000000,0x10000000,0x2000000,0x64000000,0x20000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0xc0,0x0,0x40,0x0,0x40,0x40,0x0,0x0,0x91,0x0,0x6,0x6,0x81,0x0,0x0,0x0,0x0,0xc0,0xc0,0x80,0xc0,0xc0,0x0,0x40,0x0,0x40,};
   }

  /** Constructor with InputStream. */
  public GepardParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GepardParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GepardParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GepardParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GepardParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GepardParser(GepardParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GepardParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
